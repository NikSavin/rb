class HelloWorld
  define_method :cube do |my_arg| #Создавать методы можно не только при помощи метода def, но и при помощи мета программирования.В данной программе при помощи метода define_method создается метод :cube в качестве аргумента define_method передается символ :cube.
  	#define_method полезен когда нам нужно создать много однотипных методов или мы не знаем заранее название методов
  	my_arg ** 3
  end
end

#class HelloWorld #Аналогичен верхнему варианту
  #def cube(my_arg)
  #  my_arg ** 3
  #end
#end

hello = HelloWorld.new
puts hello.cube(2)#Здесь мы передаем нашему аргументу параметр 2 он подставляет его в параметр |my_arg| и уже параметр my_arg возводит число в куб (my_arg ** 3).

#Приемы мета программирования используются в основном когда нам нужно сделать границы метода прозрачными для локальных переменных.

class Raindow
	COLORS = {
		red: "красный",
		yellow: "желтый",
		orange: "оранжевый",
		green: "зеленый",
		blue: "голубой",
		indigo: "синий",
		violet: "фиолетовый"
	}

	COLORS.each do |met, name|#В цикле мы обходим hash при помощи итератора each.Итератор принемает блок |met, name|, которое содержит 2 параметра КЛЮЧЬ-met и ЗНАЧЕНИЕ-name.Праметр мet будет содержать название цвета на английском языке, через name будет передаваться название на русском языке.
		define_method met do #С помощью define_method мы создаем метод |met| название которого совпадает с английским названием цвета.
			name#внутри возвращаем русское название цвета.
		end
	end
end

r = Raindow.new
puts r.yellow
puts r.blue

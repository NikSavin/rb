#Представим что нашей программе потребуется больше атрибутов,например потребуется время сеанса.Давайте введем еще набор методов которые будут обслуживать дату.
#Нам потребуется еще одна инстанс переменная это date.Количество инстанс переменных не ограничено.
class Ticket
  def initialize(date, price: 5.5)
  #def initialize(price = 5.5)
  	set_price(price)
  	set_date(date)
  end

  def set_price(price)
  	@price = price
  end

  def price
  	@price
  end

  def set_date(date)
    @date = date 
  end

  def date
  	@date
  end

end

#ticket1 = Ticket.new #Если мы сейчас попробуем воспользоваться объектами инстанс переменная date будет неопределенна.НАм прийдется расширить количество параметров которые мы передаем конструктору initialize.
ticket1 = Ticket.new(date: '11.12.2022')
ticket2 = Ticket.new(date: '01.02.2022' ,price: 6.4)

puts "Цена билета ticket1 #{ticket1}"
puts "Цена билета ticket2 #{ticket2}"

puts "Дата вылета ticket1 #{ticket1}"
puts "Дата вылета ticket2 #{ticket2}"
__END__
class Ticket
  
  def initialize(price = 5.5) #Мы можем задать цену по умолчанию используя значение по умолчанию (price = 5.5).После этого для новых объектов Ticket.new будет устанавливаться значение по умолчанию 5.5 мы можем его изменить передавая в параметры .new() то значение которое нам нужно.Например Ticket.new(6.5).
  #def initialize(price)# В данном случае нам нужно обязательно передать аргумен в параметр price объекта Ticket.new(5.5) иначе программа сломается.
	#@price = price #Если мы передаем в initialize какие то параметры мы должны обязательно передавать их методу new(Ticket.new(price параметр)) иначе программа сломается.
	#@price = 5.5 #В данном методе плохо то что мы установили значение по умолчанию внутри метода initialize.Так как initialize является обычным методом мы можем установить параметры, что будет более правильным.
    set_price(price)
  end
  
  def set_price(price)#Мы можем убрать метод или оставить его на тот случай если мы захотим изменить цену билета в процессе нашей программы.Для того чтобы код не повторялся давайте вызовем его в методе initialize.
  	@price = price
  end

  def price #Инстанс переменные хороши тем что они уникальны для каждого из объектов.Т.е. мы в каждом объекте можем хранить свою цену билетов.
  	@price
  end
end

ticket1 = Ticket.new
ticket2 = Ticket.new(6.5)

#Проблема данной программы в том что участок между созданием билета и установкой цены существует участок где цена билета является не определенной.
puts "Цена билета ticket1: #{ticket1.price}" #nil цена билета при первом вызове является не опрееленной.
#Для того чтобы избежать это предназначен специальный конструктор, метод который вызывается до всех остальных методов он позволяет инициализировать объект,задать ему изначально не противоречивое состояние.Для этого предназначен специальный метод initialize.

#После создания метода initialize и передачи в метод new его параметров у нас отпадает надобность в явном вызове метода set_price.
#ticket1.set_price(6.5)
#ticket2.set_price(5.5)

puts "Цена билета ticket1: #{ticket1.price}"
puts "Цена билета ticket2: #{ticket2.price}"

# Этот урок мы начнем с изучения гема Bundler.
# Познакомиться с этим гемом можно на его официальном сайте bundler.io
# Чтобы установить на компьютер гем нужно выполнить команду gem install bundler
# Необходимо выполнить команду bundle init в папке нашего проекта. Команда создает гем файл это конфигурационный файл при помощи которого мы можем управлять гемами проекта.начиная с текушего момента мы можем не использовать команду gem.
# Теперь для установки гема мы будем использовать команду bundle.
# bundler это своеобразный менеджер пакетов.Он позволяет не только установить гемы, но и устанавливает зависимости гемов.
# Теперь посмотрим в папку с нашим проектом и увидим что у нас появился файл - Gemfile в котором появилась строчка source "https://rubygems.org".
# source указывает что источником файлов будет служить сайт https://rubygems.org
# Иногда что бы гемы загружались быстрее используються зеркала.Но мы будем пользоваться стандартным сайтом.
# Теперь мы посмотрим как установить гем в файле Gemfile на примере гемов rake и rspec.
# Чтобы установить гем нам нужно просто написать команду gem 'rake' и gem 'rspec' соответственно.
# Через запятую мы мжем указать версию гема например установим gem 'rspec' версия которого будет '3.7.0'
# Содержимое Gemfile на самом деле являеться руби программой а инструкция gem являеться методом. Мы могли бы записать строки gem 'rake' с использованием круглых скобок gem ('rake') однако здесь круглые скобки намеренно опускаються.
# Строка gem 'rake' это пример так называемого DSL языка(Про него я прочитал на странице https://www.jetbrains.com/ru-ru/mps/concepts/domain-specific-languages/)
# Рубисты очень любят создавать такие специальные языки для решения таких вот специальных задач.Например для управления гемами или для тестирования или для доставки приложения на сервера.
# Мы будем встречать DLS очень часто, особенно при работе с ruby on rails.


# И так при помощи Gemfile мы потребовали установки двух гемов: gem 'rake' gem 'rspec'. Давайте выполним команду bundle install что бы установить гемы.
# Перемещаемся в консоль и выполняем команду bundle install. Команда install являеться командой по умолчанию поэтому ее можно не писать и выполнять просто bundle.
# Bundle посещает https://rubygems.org и загружает все необходимые гемы и зависимости.
# Обратим внимание что при установки в консоли было установлино больше двух гемов которые мы указали.Дело в том что для работы rspec требуеться дополнительные гемы и они так же были дополнительно установлены.
# В проекте у нас появился файл Gemfile.lock.Он автоматически гинерируеться bundle при установке и обновлении гемов.ОН НЕ ПРЕДНАЗНАЧЕН ДЛЯ РУЧНОГО РЕДАКТИРОВАНИЯ.
# В Gemfile.lock можно посмотреть установленные гемы а так же зависимости.

# Обратим внимание на 6 строку в Gemfile.lock. 
# Там указан гем rspec который на самом деле являеться составным и состаит из трех гемов.Эти гемы ставяться отдельно и в свою очередь зависят от других гемов.
# Таким образом мы можем видеть дерево зависимостей.Обратим внимание так же на версии каждого гема.
# Будучи один раз установлены в Gemfile.lock они остаются неизменными.
# После того как этот файл размещаеться в Git можно быть увереным что все участники проекта работают с одним и тем же набором библиотек и версии у всех одинаковые.

# Управлять версиями можно и в Gemfile.Как видно для rspec мы указали версию '3.7.0'.
# Цифры в версии означают 3-мажорная, 7-минорная, 0-патч.
# Как правило когда выпускаеться программное обеспечение мажорная версия изменяеться при значительной смене функциональности.Зачастую такая смена может приводить к паломке обратой совместимости.
# Регулярные релизы отмечаються минорной версией. Хорошей практикой являеться сохранение обратной совместимости в случае минорной версии.
# Когда релиз выпущен например 3.7 его функционал не изменяеться, однако найденные ошибки нужно исправлять и выпускать промежуточные выпуски, такие выпуски отличаються увеличением патч версий.

# Требования к версии можно регулировать при помощи специальных управляющих символов.
# Например при использовании символа ">= 3.7.0" можно потребовать что бы версия была больше 3.7.0 .Любая версия больше 3.7.0 будет подходить под это условие.
# Бандлер будет подберать максимально стабильную версию под это условие, ориентируясь однако на зависимости других гемов.
# При использовании символа "~> 3.7.0" можно зафиксировать версию в пределах патч версии.Мы требуем установку версии "3.7" при этом патч версия может быть любой.
